<% content_for :title, " - " << @project.name %>
<script type="text/javascript" src="<%= ENV['RAILS_RELATIVE_URL_ROOT'] %>/javascripts/mochikit/MochiKit.js"></script>
<script type="text/javascript" src="<%= ENV['RAILS_RELATIVE_URL_ROOT'] %>/javascripts/plotkit/Base.js"></script>
<script type="text/javascript" src="<%= ENV['RAILS_RELATIVE_URL_ROOT'] %>/javascripts/plotkit/Layout.js"></script>
<script type="text/javascript" src="<%= ENV['RAILS_RELATIVE_URL_ROOT'] %>/javascripts/plotkit/Canvas.js"></script>
<script type="text/javascript" src="<%= ENV['RAILS_RELATIVE_URL_ROOT'] %>/javascripts/plotkit/SweetCanvas.js"></script>
<%= javascript_include_tag :defaults %>

<p id="notice"><%= notice %></p>

<h1>
  <%= @project.name %>
</h1>


<% if current_user.is_admin? then %>
<p>
  <b>Risk configuration:</b>
  <%= link_to @project.risk_configuration.name, @project.risk_configuration %>
</p>
<% end %>

<div class="graphContainer loading">
<canvas class="demo" id="graph" width="800"></canvas>
</div>


<script>


var oldGraphWidth = $("#graph").attr("width");
var oldScroll = -1;
var graphData;
var days = <%= @project.days_since_creation %>;

function toggleZoom() {
    var elm = $(".graphContainer");
    var width = oldGraphWidth;
    if (elm.hasClass("zoomed")) {
        oldScroll = elm.scrollLeft();
        elm.removeClass("zoomed");
    } else {
        elm.addClass("zoomed");
        width = days * 10;
    }
    elm.text("");
    $("<canvas>").attr("id", "graph").attr("width", width).appendTo(elm);
    drawGraph();
    elm.css({"width": "auto"});
    if (elm.hasClass("zoomed")) {
        elm.scrollLeft(oldScroll > -1 ? oldScroll : width);
    }
}

$(".graphContainer").click(toggleZoom);



function drawGraph() {
    var zoomed = $(".graphContainer").hasClass("zoomed");
    var xTicks = graphData.week_ticks;
    if (days > 100 && !zoomed) {
        xTicks = graphData.month_ticks;
    }
    var layout = new PlotKit.Layout("line", {yTickPrecision: 0, xTicks: xTicks });
    layout.addDataset("Too high", graphData.total_risk );
    layout.addDataset("Accepted", graphData.accepted_risk);
    layout.evaluate();
    var canvas = MochiKit.DOM.getElement("graph");
    var plotter = new PlotKit.SweetCanvasRenderer(canvas, layout, {
    	"colorScheme": [Color.fromRGB(1, 0.0, 0.0, 0.5), Color.fromRGB(0.0, 1, 0.0, 0.5)]
    });
    plotter.render();
}

function loadGraph() {
    $.getJSON('<%= graph_project_path %>', function(data) {
        graphData = data;
        $(".graphContainer").removeClass("loading");
        drawGraph();
    });
}

MochiKit.DOM.addLoadEvent(loadGraph);
</script>
<table class="risk_list">
	<tr>
		<th></th>
		<% @project.risk_configuration.risk_levels.sort_by(&:weight).each do |risk_level| %>
			<th class="impact"><%= risk_level.name %></th>
		<% end %>
	</tr>
<% @project.risk_configuration.impacts.sort_by(&:name).each do |impact| %>
	<tr>
		<th><%= impact.name %></th>
		<% @project.risk_configuration.risk_levels.sort_by(&:weight).each do |risk_level| %>
			<% 
			 count =  @project.risks.select{|r| r.impact == impact && r.risk_level == risk_level}.count()
			 count_overridden = @project.risks.select{|r| r.impact == impact && r.risk_level == risk_level && r.accepted_override }.count() 
			 weightclass = "low"
			 if (risk_level.weight > impact.risk_level.weight) then
			 	weightclass = "medium"
			 end
			 if (impact.risk_level.above != NIL && risk_level.weight > impact.risk_level.above.weight ) then
			 	weightclass = "high"
			 end

			%>
			<td class="<%= weightclass %> <%= (count - count_overridden) > 0 && (risk_level.weight > impact.risk_level.weight ? "tooHigh" : "") %>">
				<a href="<%= project_risks_path(@project) %>?risklevel=<%= risk_level.id %>&impact=<%= impact.id %>">
					<%= count - count_overridden %>
					<% if (count_overridden > 0)  %>
						+ <span><%= count_overridden %></span>
					<% end %>
				</a>
			</td>
		<% end %>
	</tr>
<% end %>
</table>

<%= link_to "List risks", project_risks_path(@project) %>

<br />
<br />

<div class="buttonBar">
<% if current_user.is_admin? then %>
<%= button_to 'Edit', edit_project_path(@project), :method => :get %>
<%= button_to 'Export', export_project_path(@project), :method => :get %>
<% end %>
</div>